import {
  Experimental_CssVarsProvider as CssVarsProvider,
  experimental_extendTheme as extendTheme,
} from '@mui/material/styles';
// import { blue, orange } from '@mui/material/colors';
import ThemeStyles from './ThemeStyles';
import ThemeProviderDefaultMode from './ThemeProviderDefaultMode';

// Remove the "Mui" prefix from class names generated by MUI
// import { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/material/className';
// ClassNameGenerator.configure((componentName) =>
//   componentName.replace('Mui', '_')
// );

declare module '@mui/material/Button' {
  interface ButtonPropsVariantOverrides {
    dashed: true;
  }
}

const theme = extendTheme({
  colorSchemes: {
    // light: {
    //   palette: {
    //     primary: {
    //       main: 'hsl(38deg 93% 55% / 1)',
    //     },
    //     secondary: {
    //       main: '#791fc2',
    //     },
    //   },
    // },
    dark: {
      palette: {
        primary: {
          main: 'hsl(41, 100%, 48%)',
          dark: 'hsl(40, 100%, 50%)',
          light: 'hsl(42, 100%, 46%)',
        },
        secondary: {
          main: 'hsl(251deg, 100%, 95%)',
        },
        common: {
          onBackground: 'rgb(255, 255, 255 / 0.44)',
          white: 'rgb(255, 255, 255 / 0.44)',
        },
      },
    },
  },
  components: {
    MuiButton: {
      variants: [
        {
          props: { variant: 'dashed' },
          style: {
            textTransform: 'none',
            border: `2px dashed var(--mui-palette-primary-main)`,
          },
        },
        {
          props: { variant: 'dashed', color: 'secondary' },
          style: {
            border: `4px dashed var(--mui-palette-primary-main)`,
          },
        },
        {
          props: { variant: 'text' },
          style: {
            color: `var(--mui-palette-primary-dark)`,
          },
        },
      ],
    },
    MuiSlider: {
      styleOverrides: {
        valueLabel: ({ ownerState, theme }) => ({
          ...(ownerState.orientation === 'vertical' && {
            backgroundColor: 'transparent',
            color: theme.palette.grey[500],
          }),
        }),
      },
    },
  },
});

export default function ThemeProvider({ children }: any) {
  return (
    <CssVarsProvider theme={theme}>
      <ThemeProviderDefaultMode />
      <ThemeStyles>{children}</ThemeStyles>
    </CssVarsProvider>
  );
}
